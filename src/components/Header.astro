---
---

<header class="sticky top-0 z-50 bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-2">
        <div class="w-10 h-10 bg-gecko-500 rounded-lg flex items-center justify-center">
          <span class="text-white font-bold text-xl">G</span>
        </div>
        <span class="text-xl font-bold text-gray-900 dark:text-white">GeckoRoo</span>
      </a>

      <!-- Navigation -->
      <nav class="hidden md:flex items-center space-x-8">
        <a href="/" class="text-gray-700 dark:text-gray-300 hover:text-gecko-600 dark:hover:text-gecko-400 transition-colors">Home</a>
        <a href="/picks" class="text-gray-700 dark:text-gray-300 hover:text-gecko-600 dark:hover:text-gecko-400 transition-colors">All Picks</a>
        <a href="/about" class="text-gray-700 dark:text-gray-300 hover:text-gecko-600 dark:hover:text-gecko-400 transition-colors">About</a>
      </nav>

      <!-- Right side -->
      <div class="flex items-center space-x-4">
        <!-- Search trigger -->
        <button
          id="search-trigger"
          class="p-2 text-gray-600 dark:text-gray-400 hover:text-gecko-600 dark:hover:text-gecko-400"
          aria-label="Search">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </button>

        <!-- Dark mode toggle -->
        <button
          id="theme-toggle"
          class="p-2 text-gray-600 dark:text-gray-400 hover:text-gecko-600 dark:hover:text-gecko-400"
          aria-label="Toggle dark mode">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden dark:block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 block dark:hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
          </svg>
        </button>

        <!-- Mobile menu toggle -->
        <button
          id="mobile-menu-toggle"
          class="md:hidden p-2 text-gray-600 dark:text-gray-400"
          aria-label="Toggle menu">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile menu -->
    <nav id="mobile-menu" class="hidden md:hidden pb-4">
      <a href="/" class="block py-2 text-gray-700 dark:text-gray-300">Home</a>
      <a href="/picks" class="block py-2 text-gray-700 dark:text-gray-300">All Picks</a>
      <a href="/about" class="block py-2 text-gray-700 dark:text-gray-300">About</a>
    </nav>
  </div>

  <!-- Search modal -->
  <div id="search-modal" class="hidden fixed inset-0 z-50 bg-black/50" style="margin-top: 0;">
    <div class="bg-white dark:bg-gray-900 p-4 shadow-xl">
      <div class="container mx-auto max-w-2xl">
        <div id="search"></div>
        <button id="search-close" class="mt-4 text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
          Press ESC to close
        </button>
      </div>
    </div>
  </div>
</header>

<script>
  // Theme toggle
  const themeToggle = document.getElementById('theme-toggle');
  themeToggle?.addEventListener('click', () => {
    const element = document.documentElement;
    element.classList.toggle('dark');

    const isDark = element.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  });

  // Mobile menu toggle
  const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');

  mobileMenuToggle?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
  });

  // Search modal
  const searchTrigger = document.getElementById('search-trigger');
  const searchModal = document.getElementById('search-modal');
  const searchClose = document.getElementById('search-close');

  searchTrigger?.addEventListener('click', async () => {
    searchModal?.classList.remove('hidden');

    // Dynamically load and initialize Pagefind UI if it exists
    try {
      // Check if Pagefind files exist
      const response = await fetch('/_pagefind/pagefind-ui.js', { method: 'HEAD' });
      if (response.ok) {
        // Load CSS
        if (!document.querySelector('link[href="/_pagefind/pagefind-ui.css"]')) {
          const link = document.createElement('link');
          link.rel = 'stylesheet';
          link.href = '/_pagefind/pagefind-ui.css';
          document.head.appendChild(link);
        }

        // Load JS and initialize
        if (!window.PagefindUI) {
          const script = document.createElement('script');
          script.src = '/_pagefind/pagefind-ui.js';
          script.onload = () => {
            new window.PagefindUI({ element: "#search" });
          };
          document.body.appendChild(script);
        } else {
          new window.PagefindUI({ element: "#search" });
        }
      } else {
        // Pagefind not available (dev mode or not built yet)
        document.getElementById('search').innerHTML = '<p class="text-gray-500 p-4">Search is only available in production build.</p>';
      }
    } catch (error) {
      console.log('Pagefind not available');
      document.getElementById('search').innerHTML = '<p class="text-gray-500 p-4">Search is only available in production build.</p>';
    }
  });

  searchClose?.addEventListener('click', () => {
    searchModal?.classList.add('hidden');
  });

  // Close on ESC
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      searchModal?.classList.add('hidden');
    }
  });
</script>